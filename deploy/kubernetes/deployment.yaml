apiVersion: apps/v1
kind: Deployment
metadata:
  name: opamp-server
  namespace: opamp-platform
  labels:
    app: opamp-server
    version: v1.2.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: opamp-server
  template:
    metadata:
      labels:
        app: opamp-server
        version: v1.2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: opamp-server
        image: opamp-platform/opamp-server:v1.2.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: opamp
          containerPort: 8080
          protocol: TCP
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: opamp-config
              key: db.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: opamp-config
              key: db.port
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: opamp-config
              key: db.name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: opamp-secrets
              key: db.user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: opamp-secrets
              key: db.password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: opamp-config
              key: redis.host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: opamp-config
              key: redis.port
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: opamp-secrets
              key: jwt.secret
        - name: SERVER_MODE
          value: "release"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
---
apiVersion: v1
kind: Service
metadata:
  name: opamp-server
  namespace: opamp-platform
  labels:
    app: opamp-server
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: opamp-server
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opamp-config
  namespace: opamp-platform
data:
  db.host: "postgres-service"
  db.port: "5432"
  db.name: "opamp_platform"
  redis.host: "redis-service"
  redis.port: "6379"
---
apiVersion: v1
kind: Secret
metadata:
  name: opamp-secrets
  namespace: opamp-platform
type: Opaque
stringData:
  db.user: "opamp"
  db.password: "CHANGE_ME_IN_PRODUCTION"
  jwt.secret: "CHANGE_ME_TO_SECURE_RANDOM_STRING"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opamp-ingress
  namespace: opamp-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - opamp.yourdomain.com
    secretName: opamp-tls
  rules:
  - host: opamp.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: opamp-server
            port:
              number: 8080
